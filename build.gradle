buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.+'
        classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.+'
        classpath 'org.ajoberstar.grgit:grgit-gradle:3.+'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.ajoberstar.grgit'

sourceCompatibility = 12
targetCompatibility = 12
version = "${grgit.head().abbreviatedId}.${Instant.now().epochSecond}"

repositories {
    mavenCentral()
}
dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

dependencyLocking {
    lockAllConfigurations()
}

task resolveAndLockAll {
    doFirst {
        assert gradle.startParameter.writeDependencyLocks
    }
    doLast {
        configurations.findAll { it.canBeResolved }.each { it.resolve() }
    }
}

test {
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

task cleanAll {
    dependsOn clean, cleanIdea, cleanIdeaWorkspace
    doLast {
        delete 'out', '.idea'
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = new groovy.json.JsonSlurper().parseText('https://services.gradle.org/versions/current'.toURL().text).version
}
