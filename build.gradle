buildscript {
    ext.springBootVersion = '3.+'
    ext.springCloudVersion = '2022.+'

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }

    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'com.gorylenko.gradle-git-properties:gradle-git-properties:latest.release'
        classpath 'org.ajoberstar.grgit:grgit-gradle:latest.release'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.ajoberstar.grgit'
apply from: 'gradle/dependency-locking.gradle'
apply from: 'gradle/runtime.gradle'
apply from: 'gradle/docker.gradle'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}
dependencies {
    ['annotationProcessor', 'compileOnly', 'implementation', 'runtimeOnly', 'testImplementation'].each { conf ->
        dependencies.add(conf, platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
        dependencies.add(conf, platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"))
    }
    implementation platform('io.projectreactor:reactor-bom:latest.release')
    testImplementation platform('org.junit:junit-bom:latest.release')

    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'io.github.openfeign:feign-okhttp'
    implementation 'io.projectreactor:reactor-core'

    implementation 'org.springdoc:springdoc-openapi-ui:latest.release'
    implementation 'org.springdoc:springdoc-openapi-hateoas:latest.release'

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

processResources {
    filesMatching('build.properties') { it.expand(project.properties) }
}

jar {
    enabled = false
}

test {
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

task cleanAll {
    dependsOn clean, cleanIdea, cleanIdeaWorkspace
    doLast {
        delete 'out', '.idea', 'logs'
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    // gradleVersion = new groovy.json.JsonSlurper().parseText('https://services.gradle.org/versions/current'.toURL().text).version
}
